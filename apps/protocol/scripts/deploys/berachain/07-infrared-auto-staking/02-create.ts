import '@nomiclabs/hardhat-ethers';
import { runAsyncMain } from '../../helpers';
import { getDeployContext } from '../deploy-context';
import { DEFAULT_SETTINGS } from '../default-settings';
import { createAutoStaker } from '../factory-creators';

async function main() {
    const { owner, ADDRS, INSTANCES } = await getDeployContext(__dirname);

    // OHM/HONEY
    await createAutoStaker(
      'VAULTS.INFRARED_AUTO_STAKING_OHM_HONEY_A',
      owner,
      INSTANCES.FACTORIES.INFRARED_AUTO_STAKING.FACTORY,
      ADDRS.EXTERNAL.INFRARED.REWARD_VAULTS.OHM_HONEY,
      DEFAULT_SETTINGS.VAULTS.INFRARED_AUTO_STAKING.PERFORMANCE_FEE,
    );

    // BYUSD/HONEY
    await createAutoStaker(
      'VAULTS.INFRARED_AUTO_STAKING_BYUSD_HONEY_A',
      owner,
      INSTANCES.FACTORIES.INFRARED_AUTO_STAKING.FACTORY,
      ADDRS.EXTERNAL.INFRARED.REWARD_VAULTS.BYUSD_HONEY,
      DEFAULT_SETTINGS.VAULTS.INFRARED_AUTO_STAKING.PERFORMANCE_FEE,
    );

    // rUSD/HONEY
    await createAutoStaker(
      'VAULTS.INFRARED_AUTO_STAKING_RUSD_HONEY_A',
      owner,
      INSTANCES.FACTORIES.INFRARED_AUTO_STAKING.FACTORY,
      ADDRS.EXTERNAL.INFRARED.REWARD_VAULTS.RUSD_HONEY,
      DEFAULT_SETTINGS.VAULTS.INFRARED_AUTO_STAKING.PERFORMANCE_FEE,
    );

    // WBERA/iBERA
    await createAutoStaker(
      'VAULTS.INFRARED_AUTO_STAKING_WBERA_IBERA_A',
      owner,
      INSTANCES.FACTORIES.INFRARED_AUTO_STAKING.FACTORY,
      ADDRS.EXTERNAL.INFRARED.REWARD_VAULTS.WBERA_IBERA,
      DEFAULT_SETTINGS.VAULTS.INFRARED_AUTO_STAKING.PERFORMANCE_FEE,
    );

    // WBERA/HONEY
    await createAutoStaker(
      'VAULTS.INFRARED_AUTO_STAKING_WBERA_HONEY_A',
      owner,
      INSTANCES.FACTORIES.INFRARED_AUTO_STAKING.FACTORY,
      ADDRS.EXTERNAL.INFRARED.REWARD_VAULTS.WBERA_HONEY,
      DEFAULT_SETTINGS.VAULTS.INFRARED_AUTO_STAKING.PERFORMANCE_FEE,
    );

    // WBERA/IBGT
    await createAutoStaker(
      'VAULTS.INFRARED_AUTO_STAKING_WBERA_IBGT_A',
      owner,
      INSTANCES.FACTORIES.INFRARED_AUTO_STAKING.FACTORY,
      ADDRS.EXTERNAL.INFRARED.REWARD_VAULTS.WBERA_IBGT,
      DEFAULT_SETTINGS.VAULTS.INFRARED_AUTO_STAKING.PERFORMANCE_FEE,
    );

    // IBERA/OSBGT
    await createAutoStaker(
      'VAULTS.INFRARED_AUTO_STAKING_IBERA_OSBGT_A',
      owner,
      INSTANCES.FACTORIES.INFRARED_AUTO_STAKING.FACTORY,
      ADDRS.EXTERNAL.INFRARED.REWARD_VAULTS.IBERA_OSBGT,
      DEFAULT_SETTINGS.VAULTS.INFRARED_AUTO_STAKING.PERFORMANCE_FEE,
    );
}

runAsyncMain(main);
