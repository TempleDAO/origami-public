pragma solidity ^0.8.19;
// SPDX-License-Identifier: AGPL-3.0-or-later

import { IOrigamiInvestment } from "contracts/interfaces/investments/IOrigamiInvestment.sol";
import { IOrigamiOracle } from "contracts/interfaces/common/oracle/IOrigamiOracle.sol";
import { IOrigamiLovTokenMorphoManager } from
    "contracts/interfaces/investments/lovToken/managers/IOrigamiLovTokenMorphoManager.sol";

import { OrigamiTest } from "test/foundry/OrigamiTest.sol";
import { OrigamiMath } from "contracts/libraries/OrigamiMath.sol";
import {
    ExternalContracts,
    LovTokenContracts,
    Origami_lov_wstETH_wETH_EulerV2_TestDeployer
} from "test/foundry-integration/deploys/lov-wstETH-wETH-eulerV2/Origami_lov_wstETH_wETH_TestDeployer.t.sol";
import { LovTokenHelpers } from "test/foundry/libraries/LovTokenHelpers.t.sol";
import { OrigamiDexAggregatorSwapper } from "contracts/common/swappers/OrigamiDexAggregatorSwapper.sol";
import { Origami_lov_wstETH_wETH_EulerV2_TestConstants as Constants } from
    "test/foundry-integration/deploys/lov-wstETH-wETH-eulerV2/Origami_lov_wstETH_wETH_TestConstants.t.sol";

contract Origami_lov_wstETH_wETH_IntegrationTestBase is OrigamiTest {
    using OrigamiMath for uint256;

    error BadSwapParam(uint256 expected, uint256 found);
    error UnknownSwapDownAmount(uint256 amount);
    error UnknownSwapUpAmount(uint256 amount);
    error InvalidRebalanceUpParam();
    error InvalidRebalanceDownParam();

    Origami_lov_wstETH_wETH_EulerV2_TestDeployer internal deployer;
    ExternalContracts public externalContracts;
    LovTokenContracts public lovTokenContracts;

    function setUp() public virtual {
        // forked at same point in time as OrigamiEulerV2borrowAndLend.t.sol
        fork("mainnet", 22_328_836);

        deployer = new Origami_lov_wstETH_wETH_EulerV2_TestDeployer();
        origamiMultisig = address(deployer);
        (externalContracts, lovTokenContracts) = deployer.deployForked(origamiMultisig, feeCollector, overlord);
    }

    function investlovWstEth(address account, uint256 amount) internal returns (uint256 amountOut) {
        doMint(externalContracts.wstEthToken, account, amount);
        vm.startPrank(account);
        externalContracts.wstEthToken.approve(address(lovTokenContracts.lovWstEth), amount);

        (IOrigamiInvestment.InvestQuoteData memory quoteData,) =
            lovTokenContracts.lovWstEth.investQuote(amount, address(externalContracts.wstEthToken), 1, 0);

        amountOut = lovTokenContracts.lovWstEth.investWithToken(quoteData);
    }

    function exitlovWstEth(address account, uint256 amount, address recipient) internal returns (uint256 amountOut) {
        vm.startPrank(account);

        (IOrigamiInvestment.ExitQuoteData memory quoteData,) =
            lovTokenContracts.lovWstEth.exitQuote(amount, address(externalContracts.wstEthToken), 1, 0);

        amountOut = lovTokenContracts.lovWstEth.exitToToken(quoteData, recipient);
    }

    function rebalanceDownParams(
        uint256 targetAL,
        uint256 swapSlippageBps,
        uint256 alSlippageBps
    )
        internal
        view
        virtual
        returns (IOrigamiLovTokenMorphoManager.RebalanceDownParams memory params, uint256 reservesAmount)
    {
        reservesAmount = LovTokenHelpers.solveRebalanceDownAmount(lovTokenContracts.lovWstEthManager, targetAL);

        // Use the oracle price (and scale for USDC)
        // Round down to be conservative on how much is borrowed
        params.borrowAmount = lovTokenContracts.wstEthToEthOracle.convertAmount(
            address(externalContracts.wstEthToken),
            reservesAmount,
            IOrigamiOracle.PriceType.SPOT_PRICE,
            OrigamiMath.Rounding.ROUND_DOWN
        );

        (reservesAmount, params.swapData) = swapWEthToWstEthQuote(params.borrowAmount);
        params.supplyAmount = reservesAmount.subtractBps(swapSlippageBps, OrigamiMath.Rounding.ROUND_DOWN);

        params.minNewAL = uint128(targetAL.subtractBps(alSlippageBps, OrigamiMath.Rounding.ROUND_DOWN));
        params.maxNewAL = uint128(targetAL.addBps(alSlippageBps, OrigamiMath.Rounding.ROUND_UP));

        // When to sweep surplus balances and supply as collateral
        params.supplyCollateralSurplusThreshold = 0;
    }

    // Increase liabilities to lower A/L
    function doRebalanceDown(
        uint256 targetAL,
        uint256 slippageBps,
        uint256 alSlippageBps
    )
        internal
        virtual
        returns (uint256 reservesAmount)
    {
        IOrigamiLovTokenMorphoManager.RebalanceDownParams memory params;
        (params, reservesAmount) = rebalanceDownParams(targetAL, slippageBps, alSlippageBps);

        vm.startPrank(origamiMultisig);
        lovTokenContracts.lovWstEthManager.rebalanceDown(params);
    }

    function rebalanceUpParams(
        uint256 targetAL,
        uint256 swapSlippageBps,
        uint256 alSlippageBps
    )
        internal
        view
        virtual
        returns (IOrigamiLovTokenMorphoManager.RebalanceUpParams memory params)
    {
        // ideal reserves (wstETH) amount to remove
        params.withdrawCollateralAmount =
            LovTokenHelpers.solveRebalanceUpAmount(lovTokenContracts.lovWstEthManager, targetAL);

        (params.repayAmount, params.swapData) = swapWstEthToWEthQuote(params.withdrawCollateralAmount);

        // If there's a fee (currently disabled on Spark) then remove that from what we want to request
        uint256 feeBps = 0;
        params.repayAmount = params.repayAmount.inverseSubtractBps(feeBps, OrigamiMath.Rounding.ROUND_UP);

        // Apply slippage to the amount what's actually flashloaned is the lowest amount which
        // we would get when converting the collateral [wstETH] to the flashloan asset [wETH].
        // We need to be sure it can be paid off. Any remaining wETH is repaid on the wETH debt in Spark
        params.repayAmount = params.repayAmount.subtractBps(swapSlippageBps, OrigamiMath.Rounding.ROUND_DOWN);

        // When to sweep surplus balances and repay
        params.repaySurplusThreshold = 0;

        params.minNewAL = uint128(targetAL.subtractBps(alSlippageBps, OrigamiMath.Rounding.ROUND_DOWN));
        params.maxNewAL = uint128(targetAL.addBps(alSlippageBps, OrigamiMath.Rounding.ROUND_UP));
    }

    // Decrease liabilities to raise A/L
    function doRebalanceUp(uint256 targetAL, uint256 slippageBps, uint256 alSlippageBps) internal virtual {
        IOrigamiLovTokenMorphoManager.RebalanceUpParams memory params =
            rebalanceUpParams(targetAL, slippageBps, alSlippageBps);
        vm.startPrank(origamiMultisig);

        lovTokenContracts.lovWstEthManager.rebalanceUp(params);
    }

    function encode(bytes memory data) internal pure returns (bytes memory) {
        return abi.encode(OrigamiDexAggregatorSwapper.RouteData({ router: Constants.ONE_INCH_ROUTER, data: data }));
    }

    function swapWEthToWstEthQuote(uint256 ethAmount)
        internal
        pure
        returns (uint256 wstEthAmount, bytes memory swapData)
    {
        // REQUEST:
        /*
        curl -X GET \
        "https://api.1inch.dev/swap/v5.2/1/swap?src=0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2&dst=0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0&amount=463795587257521068400&from=0x0000000000000000000000000000000000000000&slippage=50&disableEstimate=true"
        \
        -H "Authorization: Bearer PinnqIP4n9rxYRndzIyWDVrMfmGKUbZG" \
        -H "accept: application/json" \
        -H "content-type: application/json"
        */

        if (ethAmount == 959.796808224433838390e18) {
            wstEthAmount = 799.993300085784518946e18;
            swapData =
                hex"12aa3caf0000000000000000000000005141b82f5ffda4c6fe1e372978f1c5427640a190000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca00000000000000000000000005141b82f5ffda4c6fe1e372978f1c5427640a190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003407db3fdbd3191936000000000000000000000000000000000000000000000015af1191f0e0d49091000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006a000000000000000000000000000000000000000068200065400060a0005f000a0c9e75c48000000000000000078500000000000000000000000000000000000000000000000000005c200016600a007e5c0d20000000000000000000000000000000000000001420000f20000d800003c4101c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200042e1a7d4d00000000000000000000000000000000000000000000000000000000000000004160dc24316b9ae028f1497c275eb9192a3ea0f6702200443df0212400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a69b529354d3007c40020d6bdbf78ae7ab96520de3a18e5e111b5eaab095312d7fe8451207f39c581f595b53c5cb19bd0b3f8da6c935e2ca0ae7ab96520de3a18e5e111b5eaab095312d7fe840004ea598cb0000000000000000000000000000000000000000000000000000000000000000000a0c9e75c48000000000000004c100800000000000000000000000000000000000000000000042e0003df00039000a007e5c0d200000000000000000000000000000000000000000000000000036c0000b05121000000000022d473030f116ddee9f6b43ac78ba3c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2004487517c45000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000136f1efcc3f8f88516b9e94110d56fdbfb1778d1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004128136f1efcc3f8f88516b9e94110d56fdbfb1778d10104286f580d000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000680eee660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010a7948dc293b656300000000000000000000000000000000000000000000000000000000000000030000000000000000000000000fe906e030a44ef24ca8c7dc7b7c53a6c4f00ce90000000000000000000000000fe906e030a44ef24ca8c7dc7b7c53a6c4f00ce90000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c4ce391d82d164c166df9c8336ddf84206b2f812000000000000000000000000775f661b0bd1739349b9a2a3ef60be277c5d2d290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000775f661b0bd1739349b9a2a3ef60be277c5d2d290000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000a0fbb7cd060093d199263632a4ef4bb438f1feb99e57b4b5f0bd0000000000000000000005c2c02aaa39b223fe8d0a0e5c4f27ead9083c756cc27f39c581f595b53c5cb19bd0b3f8da6c935e2ca002a0000000000000000000000000000000000000000000000009e349dbbfca641c08ee63c1e500109830a1aaad605bbf02a9dfa7b0b92ec2fb7daac02aaa39b223fe8d0a0e5c4f27ead9083c756cc20020d6bdbf787f39c581f595b53c5cb19bd0b3f8da6c935e2ca000a0f2fa6b667f39c581f595b53c5cb19bd0b3f8da6c935e2ca000000000000000000000000000000000000000000000002b5e2323e1c1a92122000000000000000000083aa6c84ac48980a06c4eca277f39c581f595b53c5cb19bd0b3f8da6c935e2ca01111111254eeb25477b68fb85ed929f73a9605824850a44d";
        } else if (ethAmount == 479.898404112216919190e18) {
            wstEthAmount = 399.972675386366359526e18;
            swapData =
                hex"12aa3caf0000000000000000000000005141b82f5ffda4c6fe1e372978f1c5427640a190000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca00000000000000000000000005141b82f5ffda4c6fe1e372978f1c5427640a190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a03ed9fede98c8c9600000000000000000000000000000000000000000000000ad75e328f157efbf3000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003b300000000000000000000000000000000000000039500036700031d00030300a0c9e75c48000000000000005000780000000000000000000000000000000000000000000002d50001a200016600a007e5c0d20000000000000000000000000000000000000001420000f20000d800003c4101c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200042e1a7d4d00000000000000000000000000000000000000000000000000000000000000004160dc24316b9ae028f1497c275eb9192a3ea0f6702200443df02124000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007cf311cec45469ea10020d6bdbf78ae7ab96520de3a18e5e111b5eaab095312d7fe8451207f39c581f595b53c5cb19bd0b3f8da6c935e2ca0ae7ab96520de3a18e5e111b5eaab095312d7fe840004ea598cb000000000000000000000000000000000000000000000000000000000000000004101c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200042e1a7d4d000000000000000000000000000000000000000000000000000000000000000000a0c9e75c48000000000000000c00580000000000000000000000000000000000000000000001050000b600009c41600b1a513ee24972daef112bc777a5610d4325c9e700242668dfaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003d0eb84d2214777400000000000000000000000005141b82f5ffda4c6fe1e372978f1c5427640a1904041c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2d0e30db000a0fbb7cd060093d199263632a4ef4bb438f1feb99e57b4b5f0bd0000000000000000000005c2c02aaa39b223fe8d0a0e5c4f27ead9083c756cc27f39c581f595b53c5cb19bd0b3f8da6c935e2ca00020d6bdbf787f39c581f595b53c5cb19bd0b3f8da6c935e2ca000a0f2fa6b667f39c581f595b53c5cb19bd0b3f8da6c935e2ca0000000000000000000000000000000000000000000000015aebc651e2afdf7e6000000000000000000084046ae93632280a06c4eca277f39c581f595b53c5cb19bd0b3f8da6c935e2ca01111111254eeb25477b68fb85ed929f73a960582000000000000000000000000004850a44d";
        } else if (ethAmount == 960.796808224433838390e18) {
            wstEthAmount = 800.771785472502188980e18;
            swapData =
                hex"12aa3caf0000000000000000000000005141b82f5ffda4c6fe1e372978f1c5427640a190000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca00000000000000000000000005141b82f5ffda4c6fe1e372978f1c5427640a190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003415bbf68f7a7d1936000000000000000000000000000000000000000000000015b478701bb5e665da0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000077800000000000000000000000000000000000000075a00072c0006e20006c800a0c9e75c480000000000000000785000000000000000000000000000000000000000000000000000069a00016600a007e5c0d20000000000000000000000000000000000000001420000f20000d800003c4101c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200042e1a7d4d00000000000000000000000000000000000000000000000000000000000000004160dc24316b9ae028f1497c275eb9192a3ea0f6702200443df0212400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a6c5849c97cf7aa230020d6bdbf78ae7ab96520de3a18e5e111b5eaab095312d7fe8451207f39c581f595b53c5cb19bd0b3f8da6c935e2ca0ae7ab96520de3a18e5e111b5eaab095312d7fe840004ea598cb0000000000000000000000000000000000000000000000000000000000000000000a0c9e75c4800000000004c0010040400000000000000000000000000000000050600046a00042e0003df00004f00a0fbb7cd060093d199263632a4ef4bb438f1feb99e57b4b5f0bd0000000000000000000005c2c02aaa39b223fe8d0a0e5c4f27ead9083c756cc27f39c581f595b53c5cb19bd0b3f8da6c935e2ca000a007e5c0d200000000000000000000000000000000000000000000000000036c0000b05121000000000022d473030f116ddee9f6b43ac78ba3c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2004487517c45000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000136f1efcc3f8f88516b9e94110d56fdbfb1778d1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004128136f1efcc3f8f88516b9e94110d56fdbfb1778d10104286f580d000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000680f06780000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000855b5272a1842bed00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000fe906e030a44ef24ca8c7dc7b7c53a6c4f00ce90000000000000000000000000fe906e030a44ef24ca8c7dc7b7c53a6c4f00ce90000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c4ce391d82d164c166df9c8336ddf84206b2f812000000000000000000000000775f661b0bd1739349b9a2a3ef60be277c5d2d290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000775f661b0bd1739349b9a2a3ef60be277c5d2d290000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000002156b2c24358fd215ee63c1e500109830a1aaad605bbf02a9dfa7b0b92ec2fb7daac02aaa39b223fe8d0a0e5c4f27ead9083c756cc24101c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200042e1a7d4d000000000000000000000000000000000000000000000000000000000000000041600b1a513ee24972daef112bc777a5610d4325c9e700242668dfaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009e5bca680135dbc000000000000000000000000005141b82f5ffda4c6fe1e372978f1c5427640a1900020d6bdbf787f39c581f595b53c5cb19bd0b3f8da6c935e2ca000a0f2fa6b667f39c581f595b53c5cb19bd0b3f8da6c935e2ca000000000000000000000000000000000000000000000002b68f0e0376bcccbb40000000000000000000846c7f21c040680a06c4eca277f39c581f595b53c5cb19bd0b3f8da6c935e2ca01111111254eeb25477b68fb85ed929f73a96058200000000000000004850a44d";
        } else {
            revert UnknownSwapDownAmount(ethAmount);
        }

        swapData = encode(swapData);
    }

    function swapWstEthToWEthQuote(uint256 wstEthAmount)
        internal
        pure
        returns (uint256 wEthAmount, bytes memory swapData)
    {
        // REQUEST:
        /*
        curl -X GET \
        "https://api.1inch.dev/swap/v5.2/1/swap?src=0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0&dst=0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2&amount=16573668788552807277&from=0x0000000000000000000000000000000000000000&slippage=50&disableEstimate=true"
        \
        -H "Authorization: Bearer PinnqIP4n9rxYRndzIyWDVrMfmGKUbZG" \
        -H "accept: application/json" \
        -H "content-type: application/json"
        */

        if (wstEthAmount == 15.594804720258772824e18) {
            wEthAmount = 18.709761720667292654e18;
            swapData =
                hex"12aa3caf0000000000000000000000005141b82f5ffda4c6fe1e372978f1c5427640a1900000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000005141b82f5ffda4c6fe1e372978f1c5427640a1900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d86be044ac9bef5800000000000000000000000000000000000000000000000081d336940449a1f7000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004260000000000000000000000000000000000000000000004080003da00039000a007e5c0d200000000000000000000000000000000000000000000000000036c0000b05121000000000022d473030f116ddee9f6b43ac78ba37f39c581f595b53c5cb19bd0b3f8da6c935e2ca0004487517c450000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca0000000000000000000000000136f1efcc3f8f88516b9e94110d56fdbfb1778d1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004128136f1efcc3f8f88516b9e94110d56fdbfb1778d10104286f580d000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000680f016400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca00000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000081d336940449a1f70000000000000000000000000000000000000000000000000000000000000003000000000000000000000000775f661b0bd1739349b9a2a3ef60be277c5d2d29000000000000000000000000775f661b0bd1739349b9a2a3ef60be277c5d2d290000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c4ce391d82d164c166df9c8336ddf84206b2f8120000000000000000000000000fe906e030a44ef24ca8c7dc7b7c53a6c4f00ce900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fe906e030a44ef24ca8c7dc7b7c53a6c4f00ce9000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000a0f2fa6b66c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000103a66d28089343ee00000000000000000009eaa06426183b80a06c4eca27c02aaa39b223fe8d0a0e5c4f27ead9083c756cc21111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000000000004850a44d";
        } else if (wstEthAmount == 800.771785472502188980e18) {
            wEthAmount = 960.567702628695473307e18;
            swapData =
                hex"12aa3caf0000000000000000000000005141b82f5ffda4c6fe1e372978f1c5427640a1900000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000005141b82f5ffda4c6fe1e372978f1c5427640a190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002b68f0e0376bcccbb400000000000000000000000000000000000000000000001a0947021e14397e4d0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066a00000000000000000000000000000000000000000000064c00061e0005d400a0c9e75c48000000000000000008020000000000000000000000000000000000000000000000000005a600014a00a007e5c0d200000000000000000000000000000000012600010c00010600005600003c41207f39c581f595b53c5cb19bd0b3f8da6c935e2ca00004de0e9a3e00000000000000000000000000000000000000000000000000000000000000000020d6bdbf78ae7ab96520de3a18e5e111b5eaab095312d7fe845120dc24316b9ae028f1497c275eb9192a3ea0f67022ae7ab96520de3a18e5e111b5eaab095312d7fe8400443df02124000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005350b7ac50650844300206b4be0b94041c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2d0e30db000a0c9e75c480000000000000029060300000000000000000000000000000000000000000000042e0003df00039000a007e5c0d200000000000000000000000000000000000000000000000000036c0000b05121000000000022d473030f116ddee9f6b43ac78ba37f39c581f595b53c5cb19bd0b3f8da6c935e2ca0004487517c450000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca0000000000000000000000000136f1efcc3f8f88516b9e94110d56fdbfb1778d1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004128136f1efcc3f8f88516b9e94110d56fdbfb1778d10104286f580d000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000680f070c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca0000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013ff69c66e2f05dc90000000000000000000000000000000000000000000000000000000000000003000000000000000000000000775f661b0bd1739349b9a2a3ef60be277c5d2d29000000000000000000000000775f661b0bd1739349b9a2a3ef60be277c5d2d290000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c4ce391d82d164c166df9c8336ddf84206b2f8120000000000000000000000000fe906e030a44ef24ca8c7dc7b7c53a6c4f00ce900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fe906e030a44ef24ca8c7dc7b7c53a6c4f00ce9000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000a0fbb7cd060093d199263632a4ef4bb438f1feb99e57b4b5f0bd0000000000000000000005c27f39c581f595b53c5cb19bd0b3f8da6c935e2ca0c02aaa39b223fe8d0a0e5c4f27ead9083c756cc202a00000000000000000000000000000000000000000000000111466fbcbd04ee7dfee63c1e501109830a1aaad605bbf02a9dfa7b0b92ec2fb7daa7f39c581f595b53c5cb19bd0b3f8da6c935e2ca000a0f2fa6b66c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000034128e043c2872fc9b00000000000000000009ef616e01131a80a06c4eca27c02aaa39b223fe8d0a0e5c4f27ead9083c756cc21111111254eeb25477b68fb85ed929f73a960582000000000000000000000000000000000000000000004850a44d";
        } else {
            revert UnknownSwapUpAmount(wstEthAmount);
        }

        swapData = encode(swapData);
    }
}
